// Задание №1. Скопировать и отсортировать массив
// У нас есть массив строк arr. Нужно получить отсортированную копию, но оставить arr 
// неизменённым.
// Создайте функцию copySorted(arr), которая будет возвращать такую копию.
let arr = ["HTML", "JavaScript", "CSS"];

const copySorted = arr => arr.slice().sort();
let sorted = copySorted(arr);

console.log( sorted ); // CSS, HTML, JavaScript
console.log( arr ); // HTML, JavaScript, CSS (без изменений)



// Задание №2. Трансформировать в массив имён
// У вас есть массив объектов user, и в каждом из них есть user.name. Напишите код, 
// который преобразует их в массив имён.
// Например:
let vasya = { name: "Вася", age: 25 };
let petya = { name: "Петя", age: 30 };
let masha = { name: "Маша", age: 28 };
let users = [ vasya, petya, masha ];
let names = users.map(user => user.name);

console.log( names ); // Вася, Петя, Маша

// ----------------------------------------------------------------------------------------------------------------------
// Задание №3. Получить средний возраст
// Напишите функцию getAverageAge(users), которая принимает массив объектов со 
// свойством age и возвращает средний возраст.
// Формула вычисления среднего арифметического значения: (age1 + age2 + ... + ageN) / 
// N.
// Например:
let lev = { name: "Лев", age: 25 };
let anton = { name: "Антон", age: 30 };
let misha = { name: "Миша", age: 29 };
let array = [ lev, anton, misha ];

const getAverageAge = users => users.reduce((total, user) => (total + user.age), 0) / users.length

console.log(getAverageAge(array)); // (25 + 30 + 29) / 3 = 28

// -------------------------------------------------------------------------------------------------------------------
// Задание №4. Оставить уникальные элементы массива
// Пусть arr – массив строк.
// Напишите функцию unique(arr), которая возвращает массив, содержащий только 
// уникальные элементы arr.
// Например:
function unique(arr) {
    let uniqueArr = [];
arr.map(item => { 
    if(!uniqueArr.includes(item)) { 
    uniqueArr.push(item);
}
})
return uniqueArr; 
}

let strings = ["кришна", "кришна", "харе", "харе",
 "харе", "харе", "кришна", "кришна", ":-O"
];
console.log(unique(strings)); // кришна, харе, :-O

// -------------------------------------------------------------------------------------------------------------
// Задание №5. Сумма с помощью замыканий
// Напишите функцию sum, которая работает таким образом: sum(a)(b) = a+b.
// Да, именно таким образом, используя двойные круглые скобки (не опечатка).
const sum = (x) => (y) => x + y; 

console.log(sum(1)(2)); //= 3
console.log(sum(5)(-1)); //= 4

// ---------------------------------------------------------------------------------------------------------------
// Задание №6. Фильтрация с помощью функции
// У нас есть встроенный метод arr.filter(f) для массивов. Он фильтрует все элементы с 
// помощью функции f. Если она возвращает true, то элемент добавится в возвращаемый 
// массив.
// Сделайте набор «готовых к употреблению» фильтров:
// • inBetween(a, b) – между a и b (включительно).
// • inArray([...]) – находится в данном массиве.
let arr6 = [1,2,3,4,5,6,7,8,9];
const inBetween = (a,b) => item => item >= a && item <= b;
const inArray = (arr) => item => arr.includes(item);

// Они должны использоваться таким образом:
console.log(arr6.filter(inBetween(3,6))); // выбирает только значения между 3 и 6 (включительно).
console.log(arr6.filter(inArray([1,2,3]))); // выбирает только элементы, совпадающие с одним из элементов массива

// -----------------------------------------------------------------------------------------------------------
// Задание №7. Вычислить факториал
// Факториал натурального числа – это число, умноженное на "себя минус один", затем на 
// "себя минус два", и так далее до 1. Факториал n обозначается как n!
// Определение факториала можно записать как:
// n! = n * (n - 1) * (n - 2) * ...*1
// Примеры значений для разных n:
// 1! = 1
// 2! = 2 * 1 = 2
// 3! = 3 * 2 * 1 = 6
// 4! = 4 * 3 * 2 * 1 = 24
// 5! = 5 * 4 * 3 * 2 * 1 = 120
// Задача – написать функцию factorial(n), которая возвращает n!, используя рекурсию.

const factorial = (n) =>  n ? n * factorial(n - 1) : 1;
  

console.log(factorial(5)); // 120
// P.S. Подсказка: n! можно записать как n * (n-1)! Например: 3! = 3*2! = 3*2*1! = 6

// ----------------------------------------------------------------------------------------------------------
// Задание №8. Числа Фибоначчи
// Последовательность чисел Фибоначчи определяется формулой Fn = Fn-1 + Fn-2. То 
// есть, следующее число получается как сумма двух предыдущих.
// Первые два числа равны 1, затем 2(1+1), затем 3(1+2), 5(2+3) и так далее: 1, 1, 2, 3, 5, 
// 8, 13, 21....
// Числа Фибоначчи тесно связаны с золотым сечением и множеством природных 
// явлений вокруг нас.
// Напишите функцию fib(n) которая возвращает n-е число Фибоначчи.
function fib(n) {
    let a =1
    let b =1
    for (let i = 3; i <= n; i++) {
      let c = a + b;
      a = b;
      b = c;
    }
    return b;
  }

console.log(fib(3)); // 2
console.log(fib(7)); // 13
console.log(fib(77)); // 5527939700884757
// P.S. Все запуски функций из примера выше должны работать быстро. Вызов fib(77) 
// должен занимать не более доли секунды